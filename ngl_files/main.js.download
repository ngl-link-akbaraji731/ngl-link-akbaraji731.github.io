$(document).ready(function() {
    if (window.location.pathname.includes('p/sent')) document.title = 'NGL - Sent!'

    questionId = null;
    let paymentAvailable = false

    $('.form').submit(function(e) {
        e.preventDefault();

        $('.submit').attr('disabled', true)

        $.ajax({
            url: '/api/submit',
            type: 'POST',
            data: {
                username: username,
                question: $('#question').val(),
                deviceId: $('.deviceId').val(),
                gameSlug: gameSlug,
                referrer: document.referrer
            }
        }).done(function(data) {
            console.log('Sent Question', data)
            questionId = data.questionId

            if (paymentAvailable && priorityInboxEnabled) {
                $('.priority-modal').fadeIn(300);
            } else {
                const userLanguage = $("meta[name='user:language']").attr("content")
                let url = '/p/sent'
                if (gameSlug) url += `/${gameSlug}`
                if (userLanguage) url += `?lng=${userLanguage}`
                window.location.href = url
            }
        }).fail(function(err) {
            console.log('submitted - failed')
            console.log('Error submitting question', err);
            alert('Internet error! Try again')
        })
    })

    if (window.priorityInboxEnabled) {
        // Load Stripe
        const stripe = Stripe('pk_test_51KwBgeDayQIxBLDTPwldL4ZFkmIHUxl45l1GuKkkbSdzzutPEoxgLoHnCn63onsJwpV9wxHAe81a5KDrBmkhOMSx00arm3Ci9l', {
            apiVersion: "2020-08-27",
        });

        // Create Payment Request
        const paymentRequest = stripe.paymentRequest({
            country: 'US',
            currency: 'usd',
            total: {
                label: 'Boost Message',
                amount: 999,
            },
            requestPayerName: true,
            requestPayerEmail: true,
        });

        // Create Element
        const elements = stripe.elements();
        const prButton = elements.create('paymentRequestButton', {
            paymentRequest,
            style: {
                paymentRequestButton: {
                  theme: 'dark', 
                  height: '54px',
                },
              },
        });

        // Add Element to DOM
        (async () => {
            // Check the availability of the Payment Request API first.
            const result = await paymentRequest.canMakePayment();
            if (result?.applePay) {
                paymentAvailable = true
                prButton.mount('#apple-pay');
            }
        })();

        // Listen for Payment
        paymentRequest.on('paymentmethod', async (ev) => {
            // Send request to /api/getPaymentIntent using jQuery ajax
            const data = await $.ajax({
                url: '/api/getPaymentIntent',
                method: 'POST',
                data: { questionId }
            });
            console.log('data', data)

            // Confirm the PaymentIntent without handling potential next actions (yet).
            const { paymentIntent, error: confirmError } = await stripe.confirmCardPayment(
                data.clientSecret,
                { payment_method: ev.paymentMethod.id },
                { handleActions: false }
            );
        
            if (confirmError) {
                ev.complete('fail')
                return alert("Your payment method failed. Try again or skip.")
            }

            ev.complete('success')
            if (paymentIntent.status === "requires_action") {
                const { error } = await stripe.confirmCardPayment(data.clientSecret);
                if (error) return alert("Your payment method failed. Try again or skip.")
            }

            const userLanguage = $("meta[name='user:language']").attr("content")
            let url = '/p/sent'
            if (gameSlug) url += `/${gameSlug}`
            if (userLanguage) url += `?lng=${userLanguage}`
            window.location.href = url
        });
    }

    window.addEventListener( "pageshow", function ( event ) {
        var historyTraversal = event.persisted || 
                                ( typeof window.performance != "undefined" && 
                                    window.performance.navigation.type === 2 );
        if ( historyTraversal ) {
          // Handle page restore.
            $('.submit').attr('disabled', false)
            $('textarea').val('')
            $('.submit').hide()
            $('.bottom-container').show()
			$('.priority-modal').hide()
        }
    });

    const userAgent = navigator.userAgent || navigator.vendor || window.opera
    if (/android/i.test(userAgent)) {
        $('.download-link').attr('href', 'https://play.google.com/store/apps/details?id=com.nglreactnative')
    }

    $('textarea').focus(function() {
        $('.bottom-container').hide()
    })

    $('textarea').blur(function() {
        $('.bottom-container').show()
    })

    $('textarea').on('change keyup paste', function(e){
        if (e.target.value == '') {
            $('.submit').hide()
        } else {
            $('.submit').show()
        }
    });

    // TODO: Move default game fake questions to web simplelocalize
    const APP_CDN_BASE_URL = "https://cdn.simplelocalize.io/57157aec81d54cb6b2a43f8b34a61d47/_production/";
    const userLanguage = $("meta[name='user:language']").attr("content");
    let randomQuestions = []

    $.get(APP_CDN_BASE_URL + userLanguage, function(data){
        const fakeQuestionKeys = Object.keys(data).filter(key => key.startsWith('FAKE_QUESTIONS.'))
        randomQuestions = fakeQuestionKeys.map(key => data[key])
    });
    

    $('.dice-button').click(function(e) {
        // Set textarea text to a random question
        const randomQuestion = randomQuestions[Math.floor(Math.random() * randomQuestions.length)];
        $('textarea').val(randomQuestion + ' ')
        $('textarea').focus()
        $('textarea')[0].selectionStart = randomQuestion.length + 1
        $('textarea')[0].selectionEnd = randomQuestion.length + 1

        $('.submit').show()

        e.preventDefault()
    })

    if (!localStorage.getItem('deviceId')) {
        function uuidv4() {
            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
        }
        localStorage.setItem('deviceId', uuidv4())    
    }

    $('.deviceId').val(localStorage.getItem('deviceId'))

    setInterval(() => {
        let clickCount = parseInt($('.clickCount').text())
        clickCount += Math.floor(Math.random() * 5) - 1
        $('.clickCount').text(clickCount)
    }, 800)
});